<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- 添加其它视图的源头 -->
	<!-- <bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		设置为true以忽略对Accept Header的支持
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				其它视图处理
				<ref bean="viewResolver" />
			</list>
		</property>
	</bean> -->
	<!-- 配置content-negotiation-anager可以在url里设置内容类型参数,可以设置默认内容类型 -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="true" />
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html; charset=UTF-8" />
				<entry key="json" value="application/json; charset=UTF-8" />
			</map>
		</property>
		<property name="defaultContentType" value="text/html; charset=UTF-8" />
	</bean>
	<!-- 多视图分发器 -->
	<!-- <bean id="viewResolver" class="cn.sxfei.app.core.mvc.MultipleViewResolver">
		<property name="resolvers">
			<map>
				<entry key="jsp">
					<bean
						class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="viewClass"
							value="org.springframework.web.servlet.view.JstlView" />
						<property name="prefix" value="/WEB-INF/views/admin" />
						<property name="suffix" value=".jsp"/>
					</bean>
				</entry>
				<entry key="html">
					<bean
						class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
						<property name="cache" value="true" />
						<property name="order" value="0" />
						<property name="prefix" value="" />
						<property name="suffix" value=".html" />
						<property name="contentType" value="text/html;charset=utf-8" />
						把contextPath暴露给freemaker，前端可以通过￥{request.getContextPath()} 来获取上下文路径 
							<property name="requestContextAttribute" value="request"/>
						<property name="viewClass"
							value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
					</bean>
				</entry>
			</map>
		</property>
	</bean> -->

	<!-- freemarker配置 -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="defaultEncoding" value="utf-8" />
		<property name="templateLoaderPath" value="/WEB-INF/views" />
		<property name="freemarkerSettings" ref="freemarkerConfiguration" />
		<property name="freemarkerVariables">
			<map>

			</map>
		</property>
	</bean>
	<!-- ftl参数配置 -->
	<bean id="freemarkerConfiguration"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:freemarker.properties" />
	</bean>
<!-- freeMarker 页面解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.freemarker.FreeMarkerView
			</value>
		</property>
		<property name="order" value="2" />
		<property name="cache" value="true" />
		<!-- property name="viewNames" value="*.ftl"/ -->
		<property name="prefix" value="" /> <!--前缀 -->
		<property name="suffix" value=".html" /><!--后缀 .ftl -->
		<property name="contentType" value="text/html;charset=utf-8" /><!--编码 -->
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<!--上下文,这里配置之后，fkt文件中可以使用${rc.getContextPath()} 来获取文件上下文，类似jsp的request.getContextPath() -->
		<property name="requestContextAttribute" value="rc" />
		<!-- 如果freemarker自定义函数的话:有个属性 attributesMap这个属性, 里面支持方一个map,key-value的方式来定义你的自定义函数.类要实现freemarker提供的接口. -->
		<property name="attributesMap">
          <map>
            <entry key="taxonomyBox"><bean class="cn.sxfei.app.modules.sapress.web.admin.freemarker.TaxonomyBox" /></entry>
          </map>
        </property>
	</bean>
</beans>
